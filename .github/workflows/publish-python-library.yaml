name: Build and Publish Wheels

on:
  push:
    tags:
      # Trigger on version tags (e.g., v1.0.0)
      - 'v*'

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: ['3.8', '3.9', '3.10', '3.11', '3.12']
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          # Install Xcode Command Line Tools
          xcode-select --install || true
          
          # Install other dependencies via brew
          brew install cmake libomp
          
          # Ensure compiler is available
          which clang
          clang --version

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine cibuildwheel

      - name: Set up Docker (Linux only)
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v3

      - name: Build wheel
        run: |
          set -ex
          ./cibuild.sh --current-version
          
      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: wheels-${{ runner.os }}-py${{ matrix.python }}
          path: wheelhouse/*.whl

  publish:
    needs: build_wheels
    # Run this even if the previous job failed. We want to do this since some wheels might have been built successfully.
    # and we want to push them to PyPI right away. 
    if: always()
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python-bindings
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      - name: Install pipx
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipx

      - name: Clear dist folder and build SDist
        run: |
          rm -rf dist/
          pipx run build --sdist

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          path: python-bindings/dist/

      - name: Prepare dist directory
        run: |
          find dist -name "*.whl" -exec mv {} dist/ \;
          rm -rf dist/wheels-*

          # Verify we have wheels to publish
          wheel_count=$(find dist -name "*.whl" | wc -l)
          if [ "$wheel_count" -eq 0 ]; then
            echo "No wheels found to publish"
            exit 1
          fi
          
          echo "Found $wheel_count wheels to publish:"
          ls -la dist/*.whl

      - name: Upload to PyPI with twine
        if: success() 
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: pipx run twine upload dist/*